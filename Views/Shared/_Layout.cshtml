<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - cryptoceyda</title>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    <canvas id="matrixCanvas"></canvas>
    <div id="hackerTypingAnimation"></div>

    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark border-bottom box-shadow">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">cryptoceyda</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse d-sm-inline-flex justify-content-between" style="display: block !important;">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-light" asp-area="" asp-controller="Home" asp-action="Index">Ana Sayfa</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-light" asp-area="" asp-controller="Home" asp-action="RSA">RSA</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-light" asp-area="" asp-controller="Home" asp-action="AES">AES</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-light" asp-area="" asp-controller="Home" asp-action="Privacy">Gizlilik</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container main-content">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - <strong>ceyda</strong> - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.8.1/lottie.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        lottie.loadAnimation({
            container: document.getElementById('hackerTypingAnimation'),
            renderer: 'svg',
            loop: true,
            autoplay: true,
            path: 'https://lottie.host/1e2e1e2e-2e2e-4e4e-8e8e-1e2e1e2e1e2e/hacker-typing.json'
        });
    </script>
    <script>
        const canvas = document.getElementById("matrixCanvas");
        const ctx = canvas.getContext("2d");
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        window.addEventListener("resize", resizeCanvas);
        window.addEventListener("DOMContentLoaded", resizeCanvas);
        resizeCanvas();
        const binary = "01";
        let columns = Math.floor(canvas.width / 14);
        let drops = Array(columns).fill(1);

        function drawMatrix() {
            ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = "crimson";
            ctx.font = "14px monospace";

            columns = Math.floor(canvas.width / 14);
            if (drops.length !== columns) {
                drops = Array(columns).fill(1);
            }

            drops.forEach((y, x) => {
                const text = binary[Math.floor(Math.random() * binary.length)];
                ctx.fillText(text, x * 14, y * 14);
                if (y * 14 > canvas.height && Math.random() > 0.975) {
                    drops[x] = 0;
                }
                drops[x]++;
            });
        }
        setInterval(drawMatrix, 50);
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
